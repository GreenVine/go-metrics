edition = "2023";

package greenvine.gometrics.core.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "device/v1/alert.proto";
import "device/v1/config.proto";
import "device/v1/metric.proto";

option go_package = "github.com/greenvine/go-metrics/proto/gen/core/v1";

// Logs contain different types of historical events received or generated by the system.
message Logs {
  // List of incoming metrics.
  repeated greenvine.gometrics.device.v1.Metric metric_history = 1;

  // List of threshold breaches.
  repeated greenvine.gometrics.device.v1.Alert threshold_breaches = 2;

  // List of configuration updates.
  repeated greenvine.gometrics.device.v1.Config config_updates = 3;
}

// Healthz provides health status of the service.
message Healthz {
  // Provides logs related to the service.
  Logs service_logs = 1;
}

service ObservabilityService {
  // Get returns the health status of the service
  rpc GetHealthInfo(google.protobuf.Empty) returns (Healthz) {
    option (google.api.http) = {get: "/v1/healthz"};
  }
}
